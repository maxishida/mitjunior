rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ======== HELPER FUNCTIONS ========

    // Authentication helpers
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasRole(role) {
      return isAuthenticated() &&
             request.auth.token.role == role;
    }

    function isAdmin() {
      return isAuthenticated() &&
             (request.auth.token.admin == true ||
              request.auth.token.role == 'super_admin' ||
              request.auth.token.role == 'admin');
    }

    function isOrgAdmin(orgId) {
      return isAuthenticated() &&
             (hasRole('admin') || hasRole('super_admin')) &&
             request.auth.token.organizationId == orgId;
    }

    function isInstructor(courseId) {
      return isAuthenticated() &&
             (hasRole('instructor') || hasRole('admin') || hasRole('super_admin'));
    }

    // Data validation helpers
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function isValidTimestamp() {
      return request.time == request.time;
    }

    function isValidUrl(url) {
      return url.matches('^https?://.+');
    }

    function isValidRating(rating) {
      return rating is number && rating >= 1 && rating <= 5;
    }

    // Rate limiting helpers
    function wasRecentlyCreated() {
      return resource.data.createdAt > (request.time - duration.value(1, 'm'));
    }

    // Content filtering helpers
    function containsNoProfanity(text) {
      return !text.matches('(?i)(palavra1|palavra2|palavra3)');
    }

    function isValidCourseContent(content) {
      return content.size() > 10 &&
             content.size() <= 10000 &&
             containsNoProfanity(content);
    }

    // Organization access helpers
    function hasOrganizationAccess(orgId) {
      return isAuthenticated() &&
             (request.auth.token.organizationId == orgId ||
              hasRole('super_admin'));
    }

    // Privacy helpers for GDPR compliance
    function isDataOwner(userId) {
      return isOwner(userId) || isAdmin();
    }

    function canDeleteUserData(userId) {
      return isOwner(userId) || isAdmin() || hasRole('data_protection_officer');
    }

    // ======== CORE COLLECTIONS ========

    // Users Collection
    match /users/{userId} {
      allow read: if isDataOwner(userId) || isAdmin();

      allow create: if (isOwner(userId) || isAdmin()) &&
        request.resource.data.keys().hasAll([
          'uid', 'email', 'displayName', 'createdAt'
        ]) &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.uid == userId &&
        request.resource.data.displayName.size() > 0 &&
        request.resource.data.displayName.size() <= 50;

      allow update: if isDataOwner(userId) &&
        (isOwner(userId) ?
          request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'displayName', 'photoURL', 'firstName', 'lastName', 'bio',
            'preferences', 'privacy', 'updatedAt'
          ]) :
          request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'displayName', 'photoURL', 'firstName', 'lastName', 'bio',
            'preferences', 'privacy', 'status', 'role', 'permissions',
            'organizationId', 'updatedAt'
          ])
        ) &&
        (request.resource.data.diff(resource.data).affectedKeys().contains('email') ?
          isValidEmail(request.resource.data.email) : true);

      allow delete: if canDeleteUserData(userId);
      allow list: if isAdmin();
    }

    // Organizations Collection
    match /organizations/{orgId} {
      allow read: if hasOrganizationAccess(orgId);

      allow create: if isAdmin() &&
        request.resource.data.keys().hasAll([
          'name', 'slug', 'createdAt'
        ]) &&
        request.resource.data.name.size() > 2 &&
        request.resource.data.name.size() <= 100 &&
        request.resource.data.slug.matches('^[a-z0-9-]+$');

      allow update: if isOrgAdmin(orgId) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'name', 'description', 'logo', 'settings', 'status', 'updatedAt'
        ]);

      allow delete: if hasRole('super_admin');
      allow list: if isAdmin();
    }

    // ======== CONTENT COLLECTIONS ========

    // Courses Collection
    match /courses/{courseId} {
      allow read: if (resource.data.visibility == 'public' && isAuthenticated()) ||
                   (resource.data.visibility == 'organization' &&
                    hasOrganizationAccess(resource.data.organizationId)) ||
                   (resource.data.instructorId == request.auth.uid) ||
                   isAdmin() ||
                   isOrgAdmin(resource.data.organizationId);

      allow create: if (isInstructor(courseId) || isOrgAdmin(request.resource.data.organizationId)) &&
        request.resource.data.keys().hasAll([
          'title', 'description', 'organizationId', 'instructorId', 'createdAt'
        ]) &&
        request.resource.data.title.size() > 5 &&
        request.resource.data.title.size() <= 200 &&
        isValidCourseContent(request.resource.data.description) &&
        hasOrganizationAccess(request.resource.data.organizationId);

      allow update: if (resource.data.instructorId == request.auth.uid ||
                       isOrgAdmin(resource.data.organizationId) ||
                       isAdmin()) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'title', 'description', 'thumbnail', 'status', 'visibility',
          'modules', 'settings', 'updatedAt'
        ]) &&
        (request.resource.data.diff(resource.data).affectedKeys().contains('description') ?
          isValidCourseContent(request.resource.data.description) : true) &&
        (request.resource.data.diff(resource.data).affectedKeys().contains('title') ?
          request.resource.data.title.size() > 5 &&
          request.resource.data.title.size() <= 200 : true);

      allow delete: if (resource.data.instructorId == request.auth.uid ||
                       isOrgAdmin(resource.data.organizationId) ||
                       isAdmin());

      allow list: if isAuthenticated() &&
        request.query.limit <= 50 &&
        (request.query.where == null ||
         (request.query.where[0].field == 'visibility' &&
          request.query.where[0].value == 'public') ||
         (request.query.where[0].field == 'organizationId' &&
          hasOrganizationAccess(request.query.where[0].value)));
    }

    // Videos Collection
    match /videos/{videoId} {
      allow read: if request.resource != null &&
                   exists(/databases/$(database)/documents/courses/$(request.resource.data.courseId)) &&
                   ((isInstructor(request.resource.data.courseId) ||
                     isOrgAdmin(resource.data.organizationId) ||
                     isAdmin()));

      allow create: if request.resource.data.courseId in get(/databases/$(database)/documents/courses/$(request.resource.data.courseId)).data.instructors ||
                     (get(/databases/$(database)/documents/courses/$(request.resource.data.courseId)).data.instructorId == request.auth.uid ||
                      isOrgAdmin(request.resource.data.organizationId) ||
                      isAdmin()) &&
        request.resource.data.keys().hasAll([
          'courseId', 'title', 'duration', 'createdAt'
        ]) &&
        request.resource.data.title.size() > 3 &&
        request.resource.data.title.size() <= 200 &&
        request.resource.data.duration > 0;

      allow update: if exists(/databases/$(database)/documents/courses/$(resource.data.courseId)) &&
                     (get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.instructorId == request.auth.uid ||
                      isOrgAdmin(resource.data.organizationId) ||
                      isAdmin()) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'title', 'description', 'status', 'files', 'settings', 'updatedAt'
        ]);

      allow delete: if exists(/databases/$(database)/documents/courses/$(resource.data.courseId)) &&
                     (get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.instructorId == request.auth.uid ||
                      isOrgAdmin(resource.data.organizationId) ||
                      isAdmin());

      allow list: if request.query.where != null &&
                   request.query.where[0].field == 'courseId' &&
                   exists(/databases/$(database)/documents/courses/$(request.query.where[0].value)) &&
                   (get(/databases/$(database)/documents/courses/$(request.query.where[0].value)).data.instructorId == request.auth.uid ||
                    isOrgAdmin(get(/databases/$(database)/documents/courses/$(request.query.where[0].value)).data.organizationId) ||
                    isAdmin());
    }

    // ======== PROGRESS COLLECTIONS ========

    // Enrollments Collection
    match /enrollments/{enrollmentId} {
      allow read: if isOwner(resource.data.userId) ||
                   (exists(/databases/$(database)/documents/courses/$(resource.data.courseId)) &&
                    (get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.instructorId == request.auth.uid ||
                     isOrgAdmin(resource.data.organizationId) ||
                     isAdmin()));

      allow create: if isOwner(request.resource.data.userId) &&
        request.resource.data.keys().hasAll([
          'userId', 'courseId', 'status', 'enrolledAt'
        ]) &&
        exists(/databases/$(database)/documents/courses/$(request.resource.data.courseId)) &&
        get(/databases/$(database)/documents/courses/$(request.resource.data.courseId)).data.status == 'published' &&
        !exists(/databases/$(database)/documents/enrollments/$(enrollmentId));

      allow update: if (isOwner(resource.data.userId) ||
                       (exists(/databases/$(database)/documents/courses/$(resource.data.courseId)) &&
                        (get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.instructorId == request.auth.uid ||
                         isOrgAdmin(resource.data.organizationId) ||
                         isAdmin()))) &&
        (isOwner(resource.data.userId) ?
          request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'progress', 'progressData', 'notes', 'bookmarks', 'lastAccessAt', 'updatedAt'
          ]) :
          request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'status', 'certificate', 'updatedAt'
          ]));

      allow delete: if isAdmin() || isOrgAdmin(resource.data.organizationId);

      allow list: if (request.query.where != null &&
                     request.query.where[0].field == 'userId' &&
                     isOwner(request.query.where[0].value)) ||
                   (request.query.where != null &&
                     request.query.where[0].field == 'courseId' &&
                     exists(/databases/$(database)/documents/courses/$(request.query.where[0].value)) &&
                     (get(/databases/$(database)/documents/courses/$(request.query.where[0].value)).data.instructorId == request.auth.uid ||
                      isOrgAdmin(get(/databases/$(database)/documents/courses/$(request.query.where[0].value)).data.organizationId) ||
                      isAdmin())) &&
        request.query.limit <= 100;
    }

    // User Activity Collection
    match /userActivity/{activityId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();

      allow create: if (isOwner(request.resource.data.userId) || isAdmin()) &&
        request.resource.data.keys().hasAll([
          'userId', 'type', 'timestamp'
        ]) &&
        request.resource.data.type in [
          'video_start', 'video_pause', 'video_complete', 'quiz_attempt',
          'course_complete', 'login', 'logout', 'profile_update'
        ];

      allow update: if false;

      allow delete: if canDeleteUserData(resource.data.userId);

      allow list: if (request.query.where != null &&
                     request.query.where[0].field == 'userId' &&
                     isOwner(request.query.where[0].value)) ||
                   isAdmin() &&
        request.query.limit <= 100;
    }

    // ======== GAMIFICATION COLLECTIONS ========

    // User Stats Collection
    match /userStats/{userId} {
      allow read: if isDataOwner(userId);

      allow create: if isAdmin() &&
        request.resource.data.keys().hasAll([
          'userId', 'totalPoints', 'level', 'experiencePoints', 'createdAt'
        ]) &&
        request.resource.data.totalPoints >= 0 &&
        request.resource.data.level >= 1 &&
        request.resource.data.experiencePoints >= 0;

      allow update: if isAdmin() ||
                   (isOwner(userId) &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                      'preferences', 'updatedAt'
                    ]));

      allow delete: if false;
    }

    // Achievements Collection
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();

      allow create: if isAdmin() &&
        request.resource.data.keys().hasAll([
          'title', 'description', 'category', 'type', 'points',
          'requirements', 'isActive', 'createdAt'
        ]) &&
        request.resource.data.points >= 0 &&
        request.resource.data.points <= 5000 &&
        request.resource.data.title.size() > 3 &&
        request.resource.data.title.size() <= 100;

      allow update: if isAdmin() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'title', 'description', 'points', 'requirements', 'isActive', 'updatedAt'
        ]);

      allow delete: if isAdmin();

      allow list: if isAuthenticated() &&
        request.query.limit <= 50;
    }

    // User Achievements Collection
    match /userAchievements/{userAchievementId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();

      allow create: if isAdmin() &&
        request.resource.data.keys().hasAll([
          'userId', 'achievementId', 'progress', 'isCompleted', 'createdAt'
        ]) &&
        request.resource.data.progress >= 0 &&
        request.resource.data.progress <= 100;

      allow update: if isAdmin() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'progress', 'isCompleted', 'unlockedAt', 'notificationSent', 'updatedAt'
        ]);

      allow delete: if false;

      allow list: if (request.query.where != null &&
                     request.query.where[0].field == 'userId' &&
                     isOwner(request.query.where[0].value)) ||
                   isAdmin() &&
        request.query.limit <= 100;
    }

    // ======== ANALYTICS COLLECTIONS ========

    // Analytics Events Collection
    match /analyticsEvents/{eventId} {
      allow read: if isAdmin();

      allow create: if (isAuthenticated() || isAdmin()) &&
        request.resource.data.keys().hasAll([
          'name', 'timestamp'
        ]) &&
        request.resource.data.name in [
          'page_view', 'video_play', 'video_complete', 'course_enroll',
          'quiz_submit', 'achievement_unlock', 'certificate_earned'
        ];

      allow update: if false;

      allow delete: if isAdmin();

      allow list: if isAdmin() &&
        request.query.limit <= 1000;
    }

    // ======== SYSTEM COLLECTIONS ========

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);

      allow create: if isAdmin() &&
        request.resource.data.keys().hasAll([
          'userId', 'type', 'title', 'message', 'createdAt'
        ]) &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.title.size() <= 200;

      allow update: if isOwner(resource.data.userId) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'isRead', 'readAt'
        ]);

      allow delete: if isOwner(resource.data.userId) || isAdmin();

      allow list: if request.query.where != null &&
                   request.query.where[0].field == 'userId' &&
                   isOwner(request.query.where[0].value) &&
                   request.query.limit <= 100;
    }

    // Certificates Collection
    match /certificates/{certificateId} {
      allow read: if isOwner(resource.data.userId) ||
                   (request.query.where != null &&
                    request.query.where[0].field == 'verificationCode' &&
                    request.query.where[0].value == resource.data.verificationCode);

      allow create: if isAdmin() &&
        request.resource.data.keys().hasAll([
          'userId', 'courseId', 'verificationCode', 'issuedAt'
        ]) &&
        request.resource.data.score >= 0 &&
        request.resource.data.score <= 100;

      allow update: if isAdmin() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'isActive', 'isRevoked', 'revokedAt', 'revokedReason', 'updatedAt'
        ]);

      allow delete: if false;

      allow list: if (request.query.where != null &&
                     request.query.where[0].field == 'userId' &&
                     isOwner(request.query.where[0].value)) ||
                   isAdmin() &&
        request.query.limit <= 100;
    }

    // System Config Collection
    match /systemConfig/{configId} {
      allow read: if isAdmin();

      allow create: if hasRole('super_admin') &&
        request.resource.data.keys().hasAll([
          'key', 'type', 'value', 'createdAt'
        ]);

      allow update: if hasRole('super_admin');

      allow delete: if hasRole('super_admin');

      allow list: if isAdmin();
    }

    // ======== PERFORMANCE & SECURITY ========

    match /{document=**} {
      allow write: if request.write.size() < 10;
      allow read: if request.query.limit <= 1000;
    }

    match /userActivity/{activityId} {
      allow list: if request.query.limit <= 100;
    }

    match /analyticsEvents/{eventId} {
      allow list: if request.query.limit <= 500;
    }

    // TTL policies
    match /userActivity/{activityId} {
      allow read, write: if resource.data.timestamp > (request.time - duration.value(90, 'd'));
    }

    match /notifications/{notificationId} {
      allow read, write: if !resource.data.isRead ||
                           resource.data.readAt > (request.time - duration.value(30, 'd'));
    }

    // Emergency access
    match /{document=**} {
      allow read, write, delete: if hasRole('super_admin') &&
                                   request.auth.token.maintenanceMode == true;
    }
  }
}